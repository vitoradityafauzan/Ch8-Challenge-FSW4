/* eslint-disable no-undef */
const request = require("supertest");
const app = require("../../..");
const { User } = require("../../../models");

describe("POST /v1/auth/register", () => {
  let user;

  beforeEach(async () => {
    const id = 200;
    const name = "Rick Sanchez";
    const roleId = 2;
    const email = "theSmartest@SDN.com";
    const encryptedPassword = "$2a$10$dPTLsK0IlF6bnK8fG7PRD.4NINx8oS91pX2wHAgC1107G1y2C4IN6";

    // Creating Dummy Data
    user = await User.create({
      id,
      name,
      email,
      encryptedPassword,
      roleId,
    });

    return user;
  });

  const name = "Rick Sanchez";

  // Delete dummy data after every 'it' method
  afterEach(() => user.destroy({ where: { name } }));

  it("should response with 201 as status code and should response ", async () => {
    const name = "Rick Sanchez";
    const email = "theSmartest@SDN.com";
    const password = "test";

    return request(app)
      .post("/v1/auth/register")
      .set("Content-Type", "application/json")
      .send({ name, email, password })
      .then((res) => {
        expect(res.statusCode).toBe(201);
        expect(res.body).toEqual(
          expect.objectContaining({
            accessToken: expect.any(String),
          })
        );
      });
  });

  it("should response with default as status code", async () => {
    const name = {};
    const email = {};
    const password = {};

    return request(app)
      .post("/v1/auth/register")
      .set("Content-Type", "application/json")
      .send({ name, email, password })
      .then((res) => {
        expect(res.statusCode).toBe(422);
        expect(res.body).toEqual(
          expect.objectContaining({
            error: {
              code: expect.any(String),
              message: expect.any(String),
              details: expect.arrayContaining([expect.any(Object)]),
            },
          })
        );
      });
  });

  
});
